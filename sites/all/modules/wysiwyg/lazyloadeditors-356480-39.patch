From 8164e58732f575feb9f71204d4e8515b032edd24 Mon Sep 17 00:00:00 2001
From: Shawn S. Smiley <shawn.smiley@achieveinternet.com>
Date: Thu, 24 Mar 2011 10:36:16 -0700
Subject: [PATCH] Issue #356480 by shawn_smiley: Removed debug statements from previous patch.

---
 editors/ckeditor.inc       |    1 +
 editors/js/ckeditor-3.0.js |    8 ++++++
 tests/wysiwyg_test.module  |   44 +++++++++++++++++++++++++++++++++++
 wysiwyg.init.js            |   12 +++++++++
 wysiwyg.js                 |   55 ++++++++++++++++++++++++++++++++++---------
 5 files changed, 108 insertions(+), 12 deletions(-)

diff --git a/editors/ckeditor.inc b/editors/ckeditor.inc
index ca293a7..ee21c4b 100644
--- a/editors/ckeditor.inc
+++ b/editors/ckeditor.inc
@@ -142,6 +142,7 @@ function wysiwyg_ckeditor_settings($editor, $config, $theme) {
     // @todo Check whether completely disabling ProcessHTMLEntities is an option.
     'entities_latin' => FALSE,
     'entities_greek' => FALSE,
+    'global_basepath_var' => 'CKEDITOR_BASEPATH',
   );
 
   // Add HTML block format settings; common block formats are already predefined
diff --git a/editors/js/ckeditor-3.0.js b/editors/js/ckeditor-3.0.js
index d2cf300..e6594e8 100644
--- a/editors/js/ckeditor-3.0.js
+++ b/editors/js/ckeditor-3.0.js
@@ -1,6 +1,10 @@
 (function($) {
 
 Drupal.wysiwyg.editor.init.ckeditor = function(settings) {
+  window.CKEDITOR_BASEPATH = settings.global.editorBasePath + '/';
+  CKEDITOR.basePath = window.CKEDITOR_BASEPATH;
+//  Drupal.wysiwyg.editor['initialized']['ckeditor'] = true;
+
   // Plugins must only be loaded once. Only the settings from the first format
   // will be used but they're identical anyway.
   var registeredPlugins = {};
@@ -31,6 +35,10 @@ Drupal.wysiwyg.editor.init.ckeditor = function(settings) {
  * Attach this editor to a target element.
  */
 Drupal.wysiwyg.editor.attach.ckeditor = function(context, params, settings) {
+//  if (typeof Drupal.wysiwyg.editor.initialized.ckeditor == 'undefined') {
+//    Drupal.wysiwyg.editor.init.ckeditor(settings);
+//  }
+
   // Apply editor instance settings.
   CKEDITOR.config.customConfig = '';
 
diff --git a/tests/wysiwyg_test.module b/tests/wysiwyg_test.module
index c908e29..215d1fe 100644
--- a/tests/wysiwyg_test.module
+++ b/tests/wysiwyg_test.module
@@ -5,3 +5,47 @@
  * Testing functionality for Wysiwyg module.
  */
 
+/**
+ * Implements hook_menu().
+ */
+function wysiwyg_test_menu() {
+  $items['wysiwyg-test/ajax'] = array(
+    'title' => 'Ajaxified form',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('wysiwyg_test_ajax_form'),
+    'access callback' => TRUE,
+  );
+  return $items;
+}
+
+/**
+ * Form constructor for an ajaxified form lazy-loading a textarea.
+ */
+function wysiwyg_test_ajax_form($form, &$form_state) {
+  $form['enable'] = array(
+    '#type' => 'checkbox',
+    '#title' => 'Load textarea',
+    '#ajax' => array(
+      'callback' => 'wysiwyg_test_ajax_form_callback',
+      'wrapper' => 'ajax-wrapper',
+    ),
+  );
+  $form['wrapper'] = array(
+    '#type' => 'container',
+    '#id' => 'ajax-wrapper',
+  );
+  return $form;
+}
+
+/**
+ * #ajax callback for wysiwyg_test_ajax_form().
+ */
+function wysiwyg_test_ajax_form_callback($form, &$form_state) {
+  $form['body'] = array(
+    '#type' => 'text_format',
+    '#default_value' => '',
+  );
+  form_builder($form['form_id']['#value'], $form, $form_state);
+  return $form['body'];
+}
+
diff --git a/wysiwyg.init.js b/wysiwyg.init.js
index 6ccdb31..29f4777 100644
--- a/wysiwyg.init.js
+++ b/wysiwyg.init.js
@@ -6,6 +6,18 @@ Drupal.wysiwyg.editor = Drupal.wysiwyg.editor || { 'init': {}, 'attach': {}, 'de
 Drupal.wysiwyg.plugins = Drupal.wysiwyg.plugins || {};
 
 (function ($) {
+  // See if the current editor requires a global basepath variable
+  // to be set before loading.
+  if (Drupal.settings.wysiwyg) {
+    $.each(Drupal.settings.wysiwyg.configs, function(editor_index, editor_value) {
+      $.each(editor_value, function(format_index, format_value){
+        if (format_value.global_basepath_var) {
+          window[format_value.global_basepath_var] = Drupal.settings.wysiwyg.configs[editor_index].global.editorBasePath + '/';
+        }
+      });
+    });
+  }
+  
   // Determine support for queryCommandEnabled().
   // An exception should be thrown for non-existing commands.
   // Safari and Chrome (WebKit based) return -1 instead.
diff --git a/wysiwyg.js b/wysiwyg.js
index 72ca156..cbe2b32 100644
--- a/wysiwyg.js
+++ b/wysiwyg.js
@@ -45,11 +45,11 @@ Drupal.behaviors.attachWysiwyg = {
     }
 
     $('.wysiwyg', context).once('wysiwyg', function() {
-      if (!this.id || typeof Drupal.settings.wysiwyg.triggers[this.id] === 'undefined') {
+      if (!this.id || typeof settings.wysiwyg.triggers[this.id] === 'undefined') {
         return;
       }
       var $this = $(this);
-      var params = Drupal.settings.wysiwyg.triggers[this.id];
+      var params = settings.wysiwyg.triggers[this.id];
       for (var format in params) {
         params[format].format = format;
         params[format].trigger = this.id;
@@ -59,7 +59,7 @@ Drupal.behaviors.attachWysiwyg = {
       // Directly attach this editor, if the input format is enabled or there is
       // only one input format at all.
       if ($this.is(':input')) {
-        Drupal.wysiwygAttach(context, params[format]);
+        Drupal.wysiwygAttach(context, params[format], settings);
       }
       // Attach onChange handlers to input format selector elements.
       if ($this.is('select')) {
@@ -67,17 +67,45 @@ Drupal.behaviors.attachWysiwyg = {
           // If not disabled, detach the current and attach a new editor.
           Drupal.wysiwygDetach(context, params[format]);
           format = 'format' + this.value;
-          Drupal.wysiwygAttach(context, params[format]);
+          Drupal.wysiwygAttach(context, params[format], settings);
         });
       }
-      // Detach any editor when the containing form is submitted.
-      $('#' + params.field).parents('form').submit(function (event) {
-        // Do not detach if the event was cancelled.
-        if (event.isDefaultPrevented()) {
-          return;
+
+      var form_instance = $('#' + params.field).parents('form');
+      var ctools_close_instance = $('#' + params.field).parents('div.ctools-modal-content').find('a.close');
+      var event_sources = [ {"instance" : form_instance, "event" : 'submit'},
+                            {"instance" : ctools_close_instance, "event" : 'click'}];
+
+      for (index = 0; index < event_sources.length; index++) {
+        var instance_data = event_sources[index].instance.data();
+        var event_name = event_sources[index].event;
+
+        // Copy original events from instance and remove the existing handlers.
+        var orig_events = Array();
+        if (instance_data && instance_data.events && instance_data.events[event_name]) {
+          orig_events = instance_data.events[event_name].slice(0);
+          event_sources[index].instance.unbind(event_name);
         }
-        Drupal.wysiwygDetach(context, params[format]);
-      });
+
+        // Add in the wysiwyg binding as the first handler
+        event_sources[index].instance.bind(event_name, function (event) {
+         // Do not detach if the event was cancelled.
+          if (event.isDefaultPrevented()) {
+            return;
+          }
+          Drupal.wysiwygDetach(context, params[format]);
+        });
+
+        // Append the original event handlers after the wysiwyg handler
+        for (index2 = 0; index2 < orig_events.length; index2++) {
+          // Have to re-add the original events this way,
+          // for some reason the following doesn't work:
+          // event_sources[index].instance.bind(event_name, orig_events[index2]);
+          var new_event = {};
+          new_event[event_name] = orig_events[index2];
+          event_sources[index].instance.bind(new_event);
+        }
+      }
     });
   }
 };
@@ -95,7 +123,7 @@ Drupal.behaviors.attachWysiwyg = {
  * @param params
  *   An object containing input format parameters.
  */
-Drupal.wysiwygAttach = function(context, params) {
+Drupal.wysiwygAttach = function(context, params, settings) {
   if (typeof Drupal.wysiwyg.editor.attach[params.editor] == 'function') {
     // (Re-)initialize field instance.
     Drupal.wysiwyg.instances[params.field] = {};
@@ -138,6 +166,9 @@ Drupal.wysiwygAttach = function(context, params) {
  *   An object containing input format parameters.
  */
 Drupal.wysiwygDetach = function(context, params) {
+  if (typeof Drupal.wysiwyg.instances[params.field] == 'undefined') {
+    return;
+  }
   var editor = Drupal.wysiwyg.instances[params.field].editor;
   if (jQuery.isFunction(Drupal.wysiwyg.editor.detach[editor])) {
     Drupal.wysiwyg.editor.detach[editor](context, params);
-- 
1.7.2.2

