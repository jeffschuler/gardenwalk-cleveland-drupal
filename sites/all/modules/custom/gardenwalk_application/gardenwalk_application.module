<?php
/**
 * @file
 */

/**
 * Get term ID for current year from Year taxonomy vocab.
 */
function _get_current_year_tid() {
  $years_vid = 4;
  $current_year = '2017';
  foreach(taxonomy_get_tree($years_vid) as $year_term) {
    if ($year_term->name == $current_year) {
      return $year_term->tid;
    }
  }
  drupal_set_message(t('Could not get term id for current year.'), 'error');
}

/**
 *
 */
function _get_tid_from_neighborhood_name($neighborhood_name) {
  $neighborhood_vid = 1;
  foreach(taxonomy_get_tree($neighborhood_vid) as $neighborhood_term) {
    if ($neighborhood_term->name == $neighborhood_name) {
      //dpm($neighborhood_term->tid);
      return $neighborhood_term->tid;
    }
  }
  drupal_set_message(t('Could not get term id for neighborhood.'), 'error');
}

/**
 *
 */
function _get_neighborhood_garden_finders($neighborhood) {
  $neighborhood_tid = is_numeric($neighborhood) ? $neighborhood :
    _get_tid_from_neighborhood_name($neighborhood);
  if (!is_numeric($neighborhood_tid)) return;
  $neighborhood_term = taxonomy_term_load($neighborhood_tid);
  $users = array();
  foreach ($neighborhood_term->field_garden_finders['und'] as $finder_arr) {
    $finder_uid = $finder_arr['uid'];
    $users[] = user_load($finder_uid);
  }
  return $users;
}

/**
 *
 */
function _get_neighborhood_garden_finder_email_addresses($neighborhood) {
  $neighborhood_tid = is_numeric($neighborhood) ? $neighborhood :
    _get_tid_from_neighborhood_name($neighborhood);
  if (!is_numeric($neighborhood_tid)) return;
  $users = _get_neighborhood_garden_finders($neighborhood_tid);
  $i = 0;
  $addresses_str = '';
  foreach ($users as $user) {
    if (++$i > 1) {
      $addresses_str .= ', ';
    }
    $user_email_address = '"' . $user->name . '"' . ' <' . $user->mail . '>';
    $addresses_str .= $user_email_address;
  }
  return $addresses_str;
}

/**
 *
 */
function _get_neighborhood_garden_finder_names($neighborhood) {
  $neighborhood_tid = is_numeric($neighborhood) ? $neighborhood :
    _get_tid_from_neighborhood_name($neighborhood);
  if (!is_numeric($neighborhood_tid)) return;
  $users = _get_neighborhood_garden_finders($neighborhood_tid);
  $i = 0;
  $names_str = '';
  foreach ($users as $user) {
    if (++$i > 1) {
      $names_str .= ', ';
    }
    $names_str .= $user->name;
  }
  return $names_str;
}

function gardenwalk_application_node_view () {
  //dpm(_get_neighborhood_garden_finders());
  //dpm(_get_neighborhood_garden_finder_names());
  //dpm(_get_neighborhood_garden_finder_email_addresses());
}

/**
 * Implements hook_form_FORM_ID_alter() for garden_node_form.
 */
function gardenwalk_application_form_garden_node_form_alter(&$form, &$form_state, $form_id) {
  //dpm($form);
  global $user;
  if ($user->uid == 0) {
    drupal_set_title(t('GardenWalk Cleveland 2017 Garden Application'));

    // Hide fields
    remove_field($form, 'body');
    remove_field($form, 'field_gardenwalk_year');
    remove_field($form, 'field_handicap_accessible');
    remove_field($form, 'field_accessibility_notes');

    $ordered_groups = array();
    foreach ($form['#groups'] as $group_id => $group) {
      if ($group_id != 'group_main') {
        $ordered_groups[$group->weight] = $group_id;
      }
    }
    ksort($ordered_groups);
    $idx = 0;
    foreach ($ordered_groups as $weight => $group_id) {
      $form['#groups'][$group_id]->label = ++$idx . '. ' . $form['#groups'][$group_id]->label;
    }

    // Better descriptions for field titles
    $form['field_yard_areas']['und']['#title'] = 'Yard areas you will allow public access to:';
    $form['field_ok']['und']['#title'] = 'Is it okay to take photos of your garden for publicity purposes?';
    $form['field_past_gardenwalks']['und']['#title'] = 'In which past years of GardenWalk Cleveland your garden included, (if any)?';

    $form['actions']['submit']['#submit'][] = 'gardenwalk_application_submit'; // Custom submit handler
    $form['actions']['submit']['#value'] = 'Submit application'; // Save button
    $form['agreement'] = array(
      '#type' => 'fieldset',
      '#collapsible' => FALSE,
      '#weight' => 4,
    );
    $form['agreement']['text'] = array(
      '#markup' => t('<p>I agree to make my garden accessible July 8th & 9th,
      2017, (10am - 5pm.)</p><p>I understand that the selling of any items during
      the event will prevent my participation in future events.</p><p>I agree to
      not hold GardenWalk Cleveland or the Cleveland Museum of Natural History, its fiscal agent, liable for
      any damanges done to my property or anyone on it.'),
    );
    $form['agreement']['agree'] = array(
       '#type' => 'checkbox',
       '#title' => t('I agree'),
       '#required' => TRUE,
    );

    $form['field_neighborhood']['und']['#description'] =
      t('Only gardens in the selected neighborhoods are eligible. If you would like to see your neighborhood included in GardenWalk, please <a href="/contact">contact us</a>.');

    // List only neighborhoods in the current year
    $current_year_tid = _get_current_year_tid();
    foreach ($form['field_neighborhood']['und']['#options'] as $neighborhood_tid => $neighborhood) {
      if ($neighborhood_tid == '_none') {
        continue;
      }
      $in_current_year = FALSE;
      $neighborhood_term = taxonomy_term_load($neighborhood_tid);
      //dpm($neighborhood_term->name);
      if (is_object($neighborhood_term)) {
        if (isset($neighborhood_term->field_gardenwalk_years['und'])) {
          foreach ($neighborhood_term->field_gardenwalk_years['und'] as $year) {
           $year_tid = $year['tid'];
            if ($year_tid == $current_year_tid) {
              $in_current_year = TRUE;
              break;
            }
          }
        }
      } else {
        continue;
      }
      if (!$in_current_year) {
        //dpm('Removed "' . $neighborhood_term->name . '" from neighborhood list: not in current year.');
        unset($form['field_neighborhood']['und']['#options'][$neighborhood_tid]);
      }
    }

  } else {
    //unset($form['field_yard_areas']['und']['#description']);
  }
  //dsm($form);
  return $form;
}


/**
 * Removes a field from the node form, both at top-level and within the
 * field groups.
 */
function remove_field(&$form, $field_name) {
  unset($form[$field_name]);
  $groups_root = $form['#groups'];
  foreach ($groups_root as $group_name => $group) {
    $child_key = array_search($field_name, $group->children);
    if ($child_key !== FALSE) {
      unset($form['#groups'][$group_name]->children[$child_key]);
    }
  }
}

/**
 * Custom submit handler for garden submit
 */
function gardenwalk_application_submit($form, &$form_state) {
  $form_state['redirect'] = 'application-submitted';
}

/**
 * Implements hook_theme().
 *
 * Sets a custom template for the garden edit form.
 */
function gardenwalk_application_theme($existing, $type, $theme, $path) {
  return array(
    'garden_node_form' => array(
      'arguments' => array(
          'form' => NULL,
      ),
      'template' => 'node-garden-edit',
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_field_group_pre_render().
 *
 * Change vertical tabs field_group to multi-page form for anonymous users
 */
//function gardenwalk_application_field_group_pre_render_alter(&$element, $group, &$form) {
//  if ($form['uid']['#value'] == 0) {
//    if ($element['#type'] == 'vertical_tabs') {
//      $element['#type'] = 'multipage';
//      $form['#groups'][$group->group_name]->format_type = 'multipage-group';
//      field_group_pre_render_multipage_group($element, $group, $form);
//    }
//    if ($element['#type'] == 'fieldset') {
//      $element['#type'] = 'multipage_pane';
//      $form['#groups'][$group->group_name]->format_type = 'multipage';
//      field_group_pre_render_multipage($element, $group, $form);
//    }
//  }
//}

/**
 * Preprocessor for theme('garden_node_form').
 */
function gardenwalk_application_preprocess_garden_node_form(&$variables) {
  global $user;
  if ($user->uid == 0) {
    $variables['instructions'] = '<p>Want to show your garden in GardenWalk 2017?</p>
      <p>If you live in one of the GardenWalk 2017 neighborhoods, please fill out
      the four-part form, below, to apply. A garden finder from your neighborhood will get back
      to you. If you\'re interested in volunteering or supporting GardenWalk Cleveland
      in some other way, check out our <a href="/get-involved">Get Involved</a> page.</p>
      <p>Please make sure to complete all four parts of the form before submitting.';
  } else {
    $variables['instructions'] = '';
  }
}
?>