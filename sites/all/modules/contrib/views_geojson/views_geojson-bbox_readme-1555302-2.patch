diff --git a/README.txt b/README.txt
index 8e0cd03..f677df8 100644
--- a/README.txt
+++ b/README.txt
@@ -5,6 +5,7 @@ CONTENTS OF THIS FILE
 * Requirements
 * Installation
 * Usage
+  * Bounding Box Support
 * To Do
 * Credits
 * Current Maintainers
@@ -15,7 +16,7 @@ SUMMARY
 
 Views GeoJSON is a style plugin for Views to deliver location-specific data in GeoJSON format, (see GeoJSON spec: http://geojson.org/geojson-spec.html).
 
-Content is output as GeoJSON "Point" features; each row a point including geospatial coordinates (longitude,latitude) and optional metadata. All features are wrapped in a "Feature Collection" object.
+Each row is output as a GeoJSON "Features" including geospatial data and optional metadata. All features are wrapped in a "Feature Collection" object.
 
 
 REQUIREMENTS
@@ -28,24 +29,27 @@ Drupal modules:
 3rd-party libraries:
 * GeoPHP - https://github.com/phayes/geoPHP
 
+
 INSTALLATION
 ------------
 
-Install the module as usual. See http://drupal.org/documentation/install/modules-themes/modules-7 for help.
+Install the module as usual. See
+http://drupal.org/documentation/install/modules-themes/modules-7 for help.
 
 Views GeoJSON depends on the geoPHP library for converting WKT format data.
 Download geoPHP from https://github.com/downloads/phayes/geoPHP/geoPHP.tar.gz
 and unpack it into your sites/all/libraries directory.
 
+
 USAGE
 -----
 
 1. Create a View with a Page display on content with geospatial data.
-2. Add fields for longitude and latitude data.
+2. Add fields to output a Geofield, longitude & latitude or WKT.
 3. Optionally add fields for name and description.
 4. Set Format for the display to "GeoJSON Feed".
 5. In the "Style options" for this format:
-  * Choose Map Data Source (Set to Other: Lat/Lon Point.)
+  * Choose Map Data Source (Other: Lat/Lon Point, Geofield, etc.)
   * Assign the fields that represent Latitude and Longitude.
   * Optionally choose fields representing name and description for each point.
   * Optionally set a JSONP prefix, (see http://en.wikipedia.org/wiki/JSONP).
@@ -57,10 +61,31 @@ USAGE
     programatically, enable "Views API mode" to avoid early termination of
     Drupal execution.
 
+Bounding Box Filtering
+--------------------
+GeoJSON views can accept a bounding box as an argument to return only the
+points within that box.
+
+It has been tested with OpenLayers' Bounding Box Strategy but should work
+with any mapping tool that requests bounding box coordinates as
+"?BBOX=left,bottom,right,top" in the query string. Argument ID "BBOX" is
+default for OpenLayers but can be changed.
+
+1. Create a GeoJSON view as above in USAGE.
+2. Add a layer to OpenLayers of type GeoJSON, at
+   admin/structure/openlayers/layers/add/openlayers_layer_type_geojson,
+   specifying the URL to your GeoJSON feed and checking the box for "Use
+   Bounding Box Strategy".
+3. In your GeoJSON View configuration, add a Contextual Filter of type:
+   "Custom: Bounding box".
+4. In the Contextual Filter settings, under "When the filter value is NOT in
+   the URL as a normal Drupal argument", choose: "Provide default value".
+5. In the "Type" dropdown, choose: "Bounding box from query string".
+6. For OpenLayers, leave "Query argument ID" as "BBOX" and click Apply.
+
 
 TO DO
 -----
-* Sort out BoundingBox and OpenLayers WKT support.
 * Support addditional GeoJSON feature types like LineString.
 * Support an optional altitude coordinate for Point positions.
 * Support additional coordinate systems.
@@ -69,7 +94,9 @@ TO DO
 CREDITS
 -------
 
-This module was originally born from a patch by tmcw to the OpenLayers module (http://drupal.org/node/889190#comment-3376628) and adapted to model the Views Datasource module (http://drupal.org/project/views_datasource).
+This module was originally born from a patch by tmcw to the OpenLayers module
+(http://drupal.org/node/889190#comment-3376628) and adapted to model the Views
+Datasource module (http://drupal.org/project/views_datasource).
 
 Much of the code is drawn directly from these sources.
 
